resources:
  repositories:
  - repository: Gambler.Bot.Core # The name used to reference this repository in the checkout step
    type: github
    endpoint: Seuntjie900
    name: Seuntjie900/Gambler.Bot.Core
  - repository: Gambler.Bot.Strategies # The name used to reference this repository in the checkout step
    type: github
    endpoint: Seuntjie900
    name: Seuntjie900/Gambler.Bot.Strategies

trigger:
- master

name: 1.0.$(Build.BuildId)

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/Gambler.Bot.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  selfContained: 'true'
  version: '$(Build.BuildId)'

stages:
- stage: Build
  jobs:
  - job: BuildJob
    strategy:
      matrix:
        Windows:
          publishRuntime: win-x64
        Linux:
          publishRuntime: linux-x64
        # macOS:
        #   publishRuntime: osx-x64
    steps:
    - checkout: Gambler.Bot.Core
    - checkout: Gambler.Bot.Strategies
    - checkout: Self

    - task: PowerShell@2   
      inputs:
        targetType: 'inline'
        script: |
          # Update the version in the desktop project's csproj file.
          $csprojPath = Get-ChildItem -Path "$(Build.SourcesDirectory)" -Filter "Gambler.Bot.Desktop.csproj" -Recurse | Select-Object -First 1 -ExpandProperty FullName
          [xml]$csproj = Get-Content -Path $csprojPath
          $versionNode = $csproj.SelectNodes("//Project/PropertyGroup/Version") | Select-Object -First 1
          if ($versionNode -eq $null) {
            $propertyGroup = $csproj.CreateElement("PropertyGroup")
            $versionNode = $csproj.CreateElement("Version")
            $versionNode.InnerText = "$(Build.BuildNumber)"
            $propertyGroup.AppendChild($versionNode)
            $csproj.DocumentElement.AppendChild($propertyGroup)
          } else {
            $versionNode.InnerText = "$(Build.BuildNumber)"
          }
          $csproj.Save($csprojPath)

    - task: NuGetToolInstaller@1
    # New step: Install wasm-tools for .NET 8 (if needed for other projects, ignore if not)
    #- script: |
    #    dotnet workload install wasm-tools --skip-manifest-update
    #  displayName: 'Install wasm-tools for .NET 8'    


    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - script: |
        dotnet publish Gambler.Bot/Platforms/Gambler.Bot.Desktop/Gambler.Bot.Desktop.csproj -c $(buildConfiguration) -r $(publishRuntime) --self-contained=$(selfContained) -o "$(Build.ArtifactStagingDirectory)/Artifacts/$(publishRuntime)"
      displayName: 'Publish for $(publishRuntime)'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/Artifacts'
        ArtifactName: 'BuildArtifacts-$(publishRuntime)'
        publishLocation: 'container'

# - stage: Release
#   dependsOn: Build
#   jobs:
#   - job: ReleaseJob
#     steps:
#     - task: DownloadBuildArtifacts@0
#       inputs:
#         buildType: 'current'
#         downloadType: 'specific'
#         artifactName: 'BuildArtifacts-win-x64'
#         downloadPath: '$(Pipeline.Workspace)/Assets/win-x64'
#       displayName: 'Download Windows artifacts'

#     - task: DownloadBuildArtifacts@0
#       inputs:
#         buildType: 'current'
#         downloadType: 'specific'
#         artifactName: 'BuildArtifacts-linux-x64'
#         downloadPath: '$(Pipeline.Workspace)/Assets/linux-x64'
#       displayName: 'Download Linux artifacts'

    # - task: DownloadBuildArtifacts@0
    #   inputs:
    #     buildType: 'current'
    #     downloadType: 'specific'
    #     artifactName: 'BuildArtifacts-osx-x64'
    #     downloadPath: '$(Pipeline.Workspace)/Assets/osx-x64'
    #   displayName: 'Download macOS artifacts'
       

    # - task: PowerShell@2
    #   name: CreateVelopackRelease
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #         # Install the vpk tool globally
    #         dotnet tool install -g vpk
    #         # Download GitHub release data using the repository name from the pipeline variable
    #         vpk download github --repoUrl https://github.com/$(Build.Repository.Name) --token $(GitHubToken) -c win-x64
    #         vpk download github --repoUrl https://github.com/$(Build.Repository.Name) --token $(GitHubToken) -c linux-x64
    #         # Pack the release using a unique identifier and the version from a previous step (set as $(version))
    #         # vpk pack -u Gambler.Bot_win64 -v $(version) -p $(Pipeline.Workspace)/Assets/win-x64
    #         vpk [win] pack -c win-x64 -e Gambler.Bot.Desktop.Exe -u Gambler.Bot -v 5.0.$(version) --outputDir .\Releases --packDir $(Pipeline.Workspace)/Assets/win-x64/BuildArtifacts-win-x64/win-x64
    #         vpk [linux] pack -c linux-x64 -e Gambler.Bot.Desktop -u Gambler.Bot -v 5.0.$(version) --outputDir .\Releases --packDir $(Pipeline.Workspace)/Assets/linux-x64/BuildArtifacts-linux-x64/linux-x64
    #         # vpk pack -u Gambler.Bot_osx64 -v $(version) -p $(Pipeline.Workspace)/Assets/osx-x64
    #         # Upload the release to GitHub with the specified release name and tag
    #         vpk upload github --repoUrl https://github.com/$(Build.Repository.Name) --merge --releaseName "Gambler.Bot 5.0.$(version)" --tag 5.0.v$(version) -o .\Releases -c win-x64 --token $(GitHubToken) 
    #         vpk upload github --repoUrl https://github.com/$(Build.Repository.Name) --merge --releaseName "Gambler.Bot 5.0.$(version)" --tag 5.0.v$(version) -o .\Releases -c linux-x64 --token $(GitHubToken) 
      

