resources:
  repositories:
  - repository: Gambler.Bot.Core # The name used to reference this repository in the checkout step
    type: github
    endpoint: Seuntjie900
    name: Seuntjie900/Gambler.Bot.Core
  - repository: Gambler.Bot.Strategies # The name used to reference this repository in the checkout step
    type: github
    endpoint: Seuntjie900
    name: Seuntjie900/Gambler.Bot.Strategies

trigger:
- master

name: 1.0.$(Build.BuildId)

pool:
  vmImage: 'macOS-latest'

variables:
  solution: '**/Gambler.Bot.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  selfContained: 'true'
  version: '$(Build.BuildId)'

stages:
- stage: Build
  jobs:
  - job: BuildJob
    strategy:
      matrix:
        Windows:
          publishRuntime: win-x64
        Linux:
          publishRuntime: linux-x64
        macOS:
          publishRuntime: osx-x64
    steps:
    - checkout: Gambler.Bot.Core
    - checkout: Gambler.Bot.Strategies
    - checkout: Self

    - script: |
        # Update the version in the desktop project's csproj file.
        csprojPath=$(find $(Build.SourcesDirectory) -name "Gambler.Bot.Desktop.csproj" | head -n 1)
        xmlstarlet ed -L -s "/Project" -t elem -n "PropertyGroup" -v "" \
                      -s "/Project/PropertyGroup" -t elem -n "Version" -v "$(Build.BuildNumber)" \
                      $csprojPath
      displayName: 'Update Version in csproj'

    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - script: |
        dotnet restore $(solution)
      displayName: 'Restore NuGet Packages'

    - script: |
        dotnet publish Gambler.Bot/Platforms/Gambler.Bot.Desktop/Gambler.Bot.Desktop.csproj -c $(buildConfiguration) -r $(publishRuntime) --self-contained=$(selfContained) -o "$(Build.ArtifactStagingDirectory)/Artifacts/$(publishRuntime)"
      displayName: 'Publish for $(publishRuntime)'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/Artifacts'
        ArtifactName: 'BuildArtifacts-$(publishRuntime)'
        publishLocation: 'container'

- stage: Release
  dependsOn: Build
  jobs:
  - job: ReleaseJob
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'specific'
        artifactName: 'BuildArtifacts-win-x64'
        downloadPath: '$(Pipeline.Workspace)/Assets/win-x64'
      displayName: 'Download Windows artifacts'

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'specific'
        artifactName: 'BuildArtifacts-linux-x64'
        downloadPath: '$(Pipeline.Workspace)/Assets/linux-x64'
      displayName: 'Download Linux artifacts'

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'specific'
        artifactName: 'BuildArtifacts-osx-x64'
        downloadPath: '$(Pipeline.Workspace)/Assets/osx-x64'
      displayName: 'Download macOS artifacts'

    - script: |
        # Unzip all downloaded artifacts
        find $(Pipeline.Workspace)/Assets -name "*.zip" -exec sh -c 'unzip -o "{}" -d "$(dirname "{}")"' \;
      displayName: 'Unzip Downloaded Artifacts'

    - script: |
        # Install the vpk tool globally
        dotnet tool install -g vpk
        export PATH="$PATH:~/.dotnet/tools"
        # Download GitHub release data using the repository name from the pipeline variable
        vpk download github --repoUrl https://github.com/$(Build.Repository.Name)
        # Pack the release using a unique identifier and the version from a previous step (set as $(version))
        vpk pack -u Gambler.Bot_win64 -v $(version) -p $(Pipeline.Workspace)/Assets/win-x64
        vpk pack -u Gambler.Bot_linux64 -v $(version) -p $(Pipeline.Workspace)/Assets/linux-x64
        vpk pack -u Gambler.Bot_osx64 -v $(version) -p $(Pipeline.Workspace)/Assets/osx-x64
        # Upload the release to GitHub with the specified release name and tag
        vpk upload github --repoUrl https://github.com/$(Build.Repository.Name) --publish --releaseName "Gambler.Bot $(version)" --tag v$(version)
      displayName: 'Create Velopack Release'

