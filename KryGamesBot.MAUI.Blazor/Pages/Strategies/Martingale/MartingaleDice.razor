<DxFormLayout>
    <DxFormLayoutGroup>
        <DxFormLayoutItem Caption="Strategy Amount">
            <DxSpinEdit Value="MStrategy.MinBet" ValueChanged="@((decimal val) => Calculate(nameof(MStrategy.MinBet), val))" />
        </DxFormLayoutItem>
        <DxFormLayoutItem Caption="Chance">
            <DxSpinEdit Value="MStrategy.BaseChance" ValueChanged="@((decimal val) => Calculate(nameof(MStrategy.BaseChance), val))" />
        </DxFormLayoutItem>
        <DxFormLayoutItem Caption="Payout">
            <DxSpinEdit Value="payout" ValueChanged="@((decimal val) => Calculate(nameof(payout), val))" />
        </DxFormLayoutItem>
        <DxFormLayoutItem Caption="Profit">
            <DxSpinEdit @bind-Value="profit" ReadOnly=true/>
        </DxFormLayoutItem>
        <DxCheckBox @bind-Checked="MStrategy.starthigh" Text="Start High"></DxCheckBox>
        <DxCheckBox @bind-Checked="(MStrategy.startlow)" Text="Start Low"></DxCheckBox>
    </DxFormLayoutGroup>
</DxFormLayout>
@code {

    [Parameter]
    public DoormatBot.Strategies.Martingale MStrategy { get; set; }

    decimal profit = 0;
    decimal payout = 0;
    decimal Edge = 1;
    void Calculate(string s,decimal value)
    {
        switch (s)
        {
            case nameof(MStrategy.MinBet):
                MStrategy.MinBet = value;
                if (profit != (MStrategy.MinBet * payout) - MStrategy.MinBet)
                {
                    profit = (MStrategy.MinBet * payout) - MStrategy.MinBet;
                }
                break;
            case nameof(MStrategy.BaseChance):
                MStrategy.BaseChance = value;
                if (MStrategy.BaseChance != 0)
                {
                    if (payout != (100m - Edge) / MStrategy.BaseChance)
                    {
                        payout = (100m - Edge) / MStrategy.BaseChance;
                    }
                }
                break;
            case nameof(payout):
                payout = value;
                if (payout != 0)
                {
                    if (MStrategy.BaseChance != (100m - Edge) / payout)
                    {
                        MStrategy.BaseChance = (100m - Edge) / payout;
                    }
                    if (profit != MStrategy.MinBet * payout - MStrategy.MinBet)
                        profit = MStrategy.MinBet * payout - MStrategy.MinBet;
                }
                break;
        }
        InvokeAsync(StateHasChanged);
    }

}
