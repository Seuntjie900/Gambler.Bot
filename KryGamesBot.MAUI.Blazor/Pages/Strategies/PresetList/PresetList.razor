@using DoormatBot.Strategies;
@using DoormatBot.Strategies.PresetListModels;
@using KryGamesBot.MAUI.Blazor.Interfaces;
@using static DoormatBot.Strategies.PresetList;
@implements iStrategy;

<h3>PresetList</h3>

<div><DxButton Text="Open" Click="Browse"/>
<DxButton Text="Save" Click="SaveAs" />
</div>
<div>
<PresetListDice labStrategy="strategy"/>
</div>
<div>
    <DxGrid Data="strategy.PresetBets" EditMode="GridEditMode.EditRow"
            EditorRenderMode="GridEditorRenderMode.Integrated"
            EditNewRowPosition="GridEditNewRowPosition.Bottom"
            AllowSort=false
            PageSize="30"
            VirtualScrollingEnabled=true
            EditModelSaving="Grid_EditModelSaving"
            DataItemDeleting="Grid_DataItemDeleting">
        <Columns>
            <DxGridCommandColumn Width="160px" />
        <DxGridDataColumn FieldName="Amount" />
        <DxGridDataColumn FieldName="Chance" />
        <DxGridDataColumn FieldName="High" />
        <DxGridDataColumn FieldName="Switch" />
    </Columns>
</DxGrid>
</div>
<div>
<DxComboBox Data="actions" @bind-Value="strategy.EndAction"/>
<DxSpinEdit @bind-Value="strategy.EndStep"/> steps backwards
</div>
<div>
<DxComboBox Data="actions" @bind-Value="strategy.LossAction" />
<DxSpinEdit @bind-Value="strategy.LossStep" /> steps
</div>
<div>
<DxComboBox Data="actions" @bind-Value="strategy.WinAction" />
<DxSpinEdit @bind-Value="strategy.WinStep" /> steps
</div>

@code {
    List<string> actions = new List<string> { "Stop", "Reset", "Step" };
    private DoormatBot.Strategies.PresetList strategy;
    
    [Parameter]
    public DoormatBot.Doormat BotInstance { get; set; }

    [Parameter]
    public EventCallback StartBetting { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        SetStrategy(BotInstance?.Strategy);
    }

    public void GameChanged(DoormatCore.Games.Games newGame)
    {
        //throw new NotImplementedException();

    }

    public void SetStrategy(BaseStrategy Strategy)
    {

        if (Strategy is DoormatBot.Strategies.PresetList)
        {
            strategy = Strategy as DoormatBot.Strategies.PresetList;
            
        }
        InvokeAsync(StateHasChanged);
    }
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
       if (e.IsNew)
            strategy?.PresetBets.Add((e.EditModel as PresetDiceBet));
        else
        {
            (e.DataItem as PresetDiceBet).Amount = (e.EditModel as PresetDiceBet).Amount;
            (e.DataItem as PresetDiceBet).Chance = (e.EditModel as PresetDiceBet).Chance;
            (e.DataItem as PresetDiceBet).High = (e.EditModel as PresetDiceBet).High;
            (e.DataItem as PresetDiceBet).Switch = (e.EditModel as PresetDiceBet).Switch;
        }
    }
    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        
    }

    public bool TopAlign()
    {
        return true;
    }
    public async Task Saving()
    {
        
    }

    async Task Browse()
    {
        var FilePickerResult = await FilePicker.PickAsync();
        if (FilePickerResult.FullPath?.Length > 0)
        {
            /*string contents = await new StreamReader((await FilePickerResult.OpenReadAsync())).ReadToEndAsync();
            contents = contents.Trim();
            string[] lines = contents.Split(Environment.NewLine);
            strategy.BetList = lines.Select(x => decimal.Parse(x)).ToList();*/
        }
    }
    async Task SaveAs()
    {
        var FilePickerResult = await FilePicker.PickAsync();
        if (FilePickerResult.FullPath?.Length > 0)
        {
            /*string contents = await new StreamReader((await FilePickerResult.OpenReadAsync())).ReadToEndAsync();
            contents = contents.Trim();
            string[] lines = contents.Split(Environment.NewLine);
            strategy.BetList = lines.Select(x => decimal.Parse(x)).ToList();*/
        }
    }
}
