@using Gambler.Bot.AutoBet.Strategies;
@using System.Collections.ObjectModel;
@using KryGamesBot.MAUI.Blazor.Interfaces;
@implements iStrategy;
<h3>Labouchere</h3>
<DxButton Text="Browse" Click="Browse"/>
<DxGrid Data="Bets"
    EditMode="GridEditMode.EditRow" 
    EditorRenderMode="GridEditorRenderMode.Integrated" 
EditNewRowPosition="GridEditNewRowPosition.Bottom" 
AllowSort=false 
PageSize="30" 
VirtualScrollingEnabled=true
        EditModelSaving="Grid_EditModelSaving"
        DataItemDeleting="Grid_DataItemDeleting">
    <Columns>
        <DxGridCommandColumn Width="160px" />
        <DxGridDataColumn FieldName="Amount" DisplayFormat="n8"/>
    </Columns>
</DxGrid>

<DxButton Text="Browse" Click="Browse"/>        
<LabouchereDice  labStrategy="strategy"/>
<DxCheckBox @bind-Checked=strategy.chkReverseLab />
<DxRadio GroupName="labcomplete" Value="strategy.rdbLabStop">Stop</DxRadio>
<DxRadio GroupName="labcomplete" Value="strategy.rdbLabReset">Reset</DxRadio>

@code {
    public class LabBet
    {
        public decimal Amount { get; set; }
    }
    private Gambler.Bot.AutoBet.Strategies.Labouchere strategy;
    public ObservableCollection<LabBet> Bets { get; set; } = new ObservableCollection<LabBet>();
    [Parameter]
    public Gambler.Bot.AutoBet.Doormat BotInstance { get; set; }

    [Parameter]
    public EventCallback StartBetting { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        SetStrategy(BotInstance?.Strategy);
    }

    public void GameChanged(Gambler.Bot.Core.Games.Games newGame)
    {
        //throw new NotImplementedException();

    }

    public void SetStrategy(BaseStrategy Strategy)
    {

        if (Strategy is Gambler.Bot.AutoBet.Strategies.Labouchere)
        {
            strategy = Strategy as Gambler.Bot.AutoBet.Strategies.Labouchere;
            Bets.Clear();
            if (this.strategy != null && this.strategy.BetList != null)
                foreach (decimal x in this.strategy?.BetList)
                    Bets.Add(new LabBet { Amount = x });
            if (Bets.Count == 0)
            {
                Bets.Add(new LabBet { Amount = 0.00000001m });
                Bets.Add(new LabBet { Amount = 0.00000002m });
                Bets.Add(new LabBet { Amount = 0.00000003m });
                Bets.Add(new LabBet { Amount = 0.00000004m });
                Bets.Add(new LabBet { Amount = 0.00000005m });
                Bets.Add(new LabBet { Amount = 0.00000006m });
                Bets.Add(new LabBet { Amount = 0.00000005m });
                Bets.Add(new LabBet { Amount = 0.00000004m });
                Bets.Add(new LabBet { Amount = 0.00000003m });
                Bets.Add(new LabBet { Amount = 0.00000002m });
                Bets.Add(new LabBet { Amount = 0.00000001m });
            }

        }
        InvokeAsync(StateHasChanged);
    }
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e)
    {
        if (e.IsNew)
            Bets.Add((e.EditModel as LabBet));
        else
        {
            (e.DataItem as LabBet).Amount = (e.EditModel as LabBet).Amount;
        }
    }
    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e)
    {
        Bets.Remove(e.DataItem as LabBet);        
    }

    public bool TopAlign()
    {
        return true;
    }
    public async Task Saving()
    {
        strategy.BetList = Bets.Select(m => (m as LabBet).Amount).ToList();
    }

    async Task Browse()
    {
        var FilePickerResult = await FilePicker.PickAsync();
        if (FilePickerResult.FullPath?.Length > 0)
        {
            string contents = await new StreamReader((await FilePickerResult.OpenReadAsync())).ReadToEndAsync();
            contents = contents.Trim();
            string[] lines = contents.Split(Environment.NewLine);
            strategy.BetList = lines.Select(x => decimal.Parse(x)).ToList();
        }
    }
}
