@using DoormatBot;
@using DoormatBot.Strategies;
@using DoormatCore.Helpers;
@using KryGamesBot.MAUI.Blazor.Classes;
@using KryGamesBot.MAUI.Blazor.Interfaces;
@using KryGamesBot.MAUI.Blazor.Pages.Common
@using KryGamesBot.MAUI.Blazor.Pages.Games.Dice;
@using KryGamesBot.MAUI.Blazor.Pages.Strategies;
@using System.Reflection;
@using System.Text.Json;
@implements IDisposable;
<PageTitle>@title</PageTitle>
<div class="@(ShowSiteSelect?"":"visually-hidden")">
<SelectSite Sites="@Doormat.Sites" OnSiteSelected="SiteSelected" />
</div>

<div class="@(ShowInstance?"InstanceContainer":"visually-hidden")">

        <div class="statsColumn">
            <DxButton Text="Log Out"/>
            <DxButton Text="Simulate" Click="Simulate"/>
            <SiteStats stats="@botIns?.CurrentSite?.Stats" @ref=_siteStats/>
            <SessionStats Stats="@botIns?.Stats" @ref="_sessionStats" />
        </div>
        <div class="statsColumn">
            <ProfitChart @ref="_profitChart" />                
            <DynamicComponent Type="@(LiveBetViewType)" @ref="dcLiveBets" />
        </div>
    <div class="StrategyColumn">
            <div class="settingTabContainer">
                @switch (ActiveTabIndex)
                {
                    case 0:
                    <div>
                        <DxComboBox Data="botIns.Strategies.Keys" ValueChanged="@((string e)=>(StrategySelected(e)))" Value="@botIns.Strategy.StrategyName" />
                    </div>
                    <div>
                                <DxButton Text="Start" Click="Start" Enabled="btnStartIsEnabled" />
                        <DxButton Text="Resume" Click="Resume" Enabled="btnResumeIsEnabled" />                                        
                        <DxButton Text="Stop" Click="Stop" />
                        <DxButton Text="Stop On Win" Click="StopOnWin" />
                    </div>
                            <DynamicComponent Type="@(StrategyType)" @ref="dcStrategy" Parameters="@(new Dictionary<string, object>(){{"BotInstance", botIns }})" />                                    
                        break;
                    case 1:
                        <SRCControls BetSettings="@botIns?.BetSettings" />
                        break;
                    case 2:
                        <AdvancedSettings BetSettings="@botIns?.BetSettings" />
                        break;
                    case 3:
                            <Triggers BetSettings="@botIns?.BetSettings" />
                            break;
                    case 4:
                        <DynamicComponent Type="@(ManualBetType)" @ref="dcManualBet" Parameters="@(new Dictionary<string, object>(){{"PlaceBet", new EventCallback<PlaceBetEventArgs>(this, ManualBetPlaced) }})" />
                        break;
                }
            </div>
            <DxTabs CssClass="stratTabs" ScrollMode="TabsScrollMode.NoScroll" @bind-ActiveTabIndex="@ActiveTabIndex">
                <DxTab Text="Strategy">

                </DxTab>
                <DxTab Text="Reset Settings">

                </DxTab>
                <DxTab Text="Advanced settings">

                </DxTab>
                <DxTab Text="Custom Triggers">

                </DxTab>
                <DxTab Text="Manual Betting">

                </DxTab>
            </DxTabs>
        </div>
    
</div>



<DxPopup HeaderText="@("Log in " + botIns.CurrentSite?.SiteName )"
@bind-Visible="@LoginPopupVisible" >
    <Login SelectedSite="@botIns.CurrentSite" OnBackClicked="Login_OnBackClicked" OnSkipClicked="Login_OnSkipClicked" />
</DxPopup>
<DxPopup HeaderText="Simulate"
@bind-Visible="@simvisible">
    <Simulation BetSettings="botIns.BetSettings" CurrentSite="botIns.CurrentSite" Strategy="botIns.Strategy" />
</DxPopup>

@code {
    bool simvisible = false;
    int ActiveTabIndex { get; set; } = 0;
    DynamicComponent dcLiveBets;
    DynamicComponent dcManualBet;
    DynamicComponent dcStrategy;
    ProfitChart _profitChart;
    SiteStats _siteStats;
    SessionStats _sessionStats;    
    Type LiveBetViewType = typeof(DiceLiveBetsControl);
    Type ManualBetType = typeof(ManualDiceBet);
    Type StrategyType = typeof(ManualDiceBet);
    bool ShowSiteSelect = true;
    bool ShowInstance = false;
    Doormat botIns = new Doormat();
    bool LoginPopupVisible = false;
    string title = "Select site";
    string BetSettingsFile = "";
    string PersonalSettingsFile = "";
    string InstanceName = "";
    bool bbtnSimulatorIsEnabled = true;
    //StatusBar.Content = $"Stopping: {e.Message}";
    bool btnStartIsEnabled = true;
    bool btnResumeIsEnabled = true;
    public bool BotInsNotRunning { get => botIns?.Running ?? false; }
    public BotInstance()
    {
        botIns.CompileSites();
        botIns.GetStrats();

        /*botIns.NeedConstringPassword += BotIns_NeedConstringPassword;
        botIns.NeedKeepassPassword += BotIns_NeedKeepassPassword;*/
        botIns.OnGameChanged += BotIns_OnGameChanged;
        botIns.OnNotification += BotIns_OnNotification;
        botIns.OnSiteAction += BotIns_OnSiteAction;
        botIns.OnSiteBetFinished += BotIns_OnSiteBetFinished;        
        botIns.OnSiteError += BotIns_OnSiteError;
        botIns.OnSiteLoginFinished += BotIns_OnSiteLoginFinished;
        botIns.OnSiteNotify += BotIns_OnSiteNotify;

        botIns.OnSiteStatsUpdated += BotIns_OnSiteStatsUpdated;
        botIns.OnStarted += BotIns_OnStarted;
        botIns.OnStopped += BotIns_OnStopped;
        botIns.OnStrategyChanged += BotIns_OnStrategyChanged;
        //botIns.OnSiteRegisterFinished += BotIns_OnSiteRegisterFinished;


        /*if (MainWindow.Portable && File.Exists("personalsettings.json"))
            {
            PersonalSettingsFile = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\KryGamesBot\\PersonalSettings.json";

        }*/
        //Check if global settings for this account exists


    }

    protected override async Task OnInitializedAsync()
    {
        
        await base.OnInitializedAsync();
        LoadPersonalSettings();
        //(dcManualBet.Instance as ManualDiceBet).PlaceBet = new EventCallback<PlaceBetEventArgs>(this, ManualBetPlaced);
        LoadSettings("default");
        //await StrategySelected(botIns.Strategy?.StrategyName);        

        if (botIns.CurrentSite!=null)
        {
            SiteChanged(botIns.CurrentSite, botIns.CurrentSite.CurrentCurrency, botIns.CurrentGame.ToString());
            LoginPopupVisible = true;
            ShowSiteSelect = false;
            ShowInstance = true;
        }
    }

    public async Task LoadPersonalSettings()
    {
        string encironmentFolder = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
        PersonalSettingsFile = Path.Combine(encironmentFolder, "KryGamesBot", "PersonalSettings.json");
        if (File.Exists(PersonalSettingsFile))
        {
            PersonalSettingsFile = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\KryGamesBot\\PersonalSettings.json";
        }
        botIns.LoadPersonalSettings(PersonalSettingsFile);
    
    }


    public void Dispose()
    {
        botIns.StopStrategy("Application Closing");
        if (botIns.CurrentSite != null)
            botIns.CurrentSite.Disconnect();
        string path = "";
        /*if (MainWindow.Portable)
            path = "";
        else*/
        {
            path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\KryGamesBot\\";
        }
        botIns.SaveBetSettings(path + InstanceName + ".betset");
        //dlmMainLayout.SaveLayoutToXml(path + InstanceName + ".layout");
        SaveINstanceSettings(path + InstanceName + ".siteset");
    }

    void SiteChanged(DoormatCore.Sites.BaseSite NewSite, string currency, string game)
    {
        botIns.CurrentSite = NewSite;
        if (currency != null && Array.IndexOf(botIns.CurrentSite.Currencies, currency) >= 0)
            botIns.CurrentSite.Currency = Array.IndexOf(botIns.CurrentSite.Currencies, currency);
        object curGame = DoormatCore.Games.Games.Dice;
        if (game != null && Enum.TryParse(typeof(DoormatCore.Games.Games), game, out curGame) && Array.IndexOf(botIns.CurrentSite.SupportedGames, (DoormatCore.Games.Games)curGame) >= 0)
            botIns.CurrentGame = (DoormatCore.Games.Games)curGame;

        // lciSelectSite1.Visibility = Visibility.Collapsed;
        // lciLoginControl.Visibility = Visibility.Visible;
        // itmCurrency.Items.Clear();
        // foreach (string x in botIns.CurrentSite.Currencies)
        // {
        //     var itm = new BarCheckItem();
        //     itm.Content = x;
        //     itm.CheckedChanged += Itm_CheckedChanged;
        //     itmCurrency.Items.Add(itm);
        // }
        // itmGame.Items.Clear();
        // foreach (var x in botIns.CurrentSite.SupportedGames)
        // {
        //     var itm = new BarCheckItem();
        //     itm.Content = x.ToString();
        //     itm.CheckedChanged += Itm_CheckedChanged;
        //     itmGame.Items.Add(itm);
        // }
        // lueCurrencies.ItemsSource = botIns.CurrentSite.Currencies;
        // lueCurrencies.EditValue = botIns.CurrentSite.CurrentCurrency;
        // lueGames.ItemsSource = botIns.CurrentSite.SupportedGames;
        // lueGames.EditValue = botIns.CurrentGame;
        // Rename?.Invoke(this, new RenameEventArgs { newName = "Log in - " + NewSite?.SiteName });
    }
    async Task SiteSelected(SitesList selectedSite)
    {

        SiteChanged(Activator.CreateInstance(selectedSite.SiteType()) as DoormatCore.Sites.BaseSite, selectedSite.SelectedCurrency?.Name, selectedSite.SelectedGame?.Name);
        LoginPopupVisible = true;

    }
    async Task Login_OnBackClicked()
    {
        ShowSiteSelect = true;
        LoginPopupVisible = false;
        ShowInstance = false;
        InvokeAsync(StateHasChanged);
    }
    async Task Login_OnSkipClicked()
    {
        ShowSiteSelect = false;
        LoginPopupVisible = false;
        ShowInstance = true;
        InvokeAsync(StateHasChanged);
    }

    async Task ManualBetPlaced(PlaceBetEventArgs newBet)
    {
        botIns.PlaceBet(newBet.NewBet);
    }
    async Task StrategySelected(string e)
    {
        if (botIns.Strategy.StrategyName != e && !string.IsNullOrWhiteSpace(BetSettingsFile))
        {
            botIns.SaveBetSettings(BetSettingsFile);
            var Settings = botIns.LoadBetSettings(BetSettingsFile, false);
            IEnumerable<PropertyInfo> Props = Settings.GetType().GetProperties().Where(m => typeof(DoormatBot.Strategies.BaseStrategy).IsAssignableFrom(m.PropertyType));
            DoormatBot.Strategies.BaseStrategy newStrat = null;
            foreach (PropertyInfo x in Props)
            {
                DoormatBot.Strategies.BaseStrategy strat = (DoormatBot.Strategies.BaseStrategy)x.GetValue(Settings);
                if (strat != null)
                {
                    PropertyInfo StratNameProp = strat.GetType().GetProperty("StrategyName");
                    string nm = (string)StratNameProp.GetValue(strat);
                    if (nm == e)
                    {
                        newStrat = strat;
                        break;
                    }
                }
            }
            if (newStrat == null)
            {
                newStrat = Activator.CreateInstance(botIns.Strategies[e]) as DoormatBot.Strategies.BaseStrategy;
            }
            botIns.Strategy = newStrat;
        }
        //ProgrammerLUA.SetStrategy(botIns.Strategy);

    }
    void BotIns_OnSiteLoginFinished(object sender, DoormatCore.Sites.LoginFinishedEventArgs e)
    {
        if (e.Success)
        {

            //hide login, show other controls all over the place
            LoginPopupVisible = false;
            ShowSiteSelect = false;
            title = botIns.CurrentSite.SiteName;
            ShowInstance = true;
            InvokeAsync(StateHasChanged);
        }
        else
        {
            //LoginControl.LoginFailed();
        }
    }

    private void BotIns_OnSiteBetFinished(object sender, DoormatCore.Sites.BetFinisedEventArgs e)
    {
        (dcLiveBets?.Instance as iLiveBet)?.AddBet(e.NewBet);
        _profitChart.AddPoint(e.NewBet.Profit, e.NewBet.IsWin);
        _siteStats.RefreshStats();
        _sessionStats.RefreshStats();
    }

    private async void BotIns_OnStrategyChanged(object sender,EventArgs e )
    {
        //set the strategy dynamic element type to the appropriate type.
        string s = botIns.Strategy?.GetType().Name;
        switch (s)
        {
            case nameof(DAlembert): StrategyType = typeof(Strategies.DAlembert.DAlembert); break;
            case nameof(Fibonacci): StrategyType = typeof(Strategies.Fibonacci.Fibonacci); break;
            case nameof(Labouchere): StrategyType = typeof(Strategies.Labouchere.Labouchere);  break;
            case nameof(Martingale): StrategyType = typeof(Strategies.Martingale.Martingale); break;
            case nameof(PresetList): StrategyType = typeof(Strategies.PresetList.PresetList); break;
            case nameof(ProgrammerCS): StrategyType = typeof(ProgrammerModeCS); break;
            case nameof(ProgrammerJS): StrategyType = typeof(ProgrammerModeJS); break;
            case nameof(ProgrammerLUA): StrategyType = typeof(ProgrammerModeLUA); break;
            case nameof(ProgrammerPython): StrategyType = typeof(ProgrammerModePython); break;
            default:
                botIns.Strategy = new DoormatBot.Strategies.Martingale(); break;
        }
        await InvokeAsync( StateHasChanged);
        (dcStrategy?.Instance as iStrategy)?.SetStrategy(botIns?.Strategy);
        //await InvokeAsync(StateHasChanged);
    }

    public void LoadSettings(string Name)
    {
        string path = "";
        /*if (MainWindow.Portable)
            path = "";
        else*/
        {
            path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData),"KryGamesBot");
        }
        InstanceName = Name;
        //load bet settings
        //if (File.Exists(path+Name + ".betset"))
        {
            BetSettingsFile = Path.Combine( path ,Name + ".betset");

        }

        //load layout
        /*if (File.Exists(path + Name + ".layout"))
            {
            dlmMainLayout.RestoreLayoutFromXml(path + Name + ".layout");
        }*/
        if (File.Exists(Path.Combine(path , Name + ".siteset")))
        {
            LoadInstanceSettings(Path.Combine(path , Name + ".siteset"));

        }
        if (File.Exists(BetSettingsFile))
            botIns.LoadBetSettings(BetSettingsFile);
        else
        {
            botIns.StoredBetSettings = new Doormat.ExportBetSettings
                {
                    BetSettings = new DoormatBot.Helpers.InternalBetSettings(),


                };
            botIns.Strategy = new DoormatBot.Strategies.Martingale();
        }

        //load instance settings: site, currency, game, account, password if keepass is active and logged in.
        //if password is available, log in.
        //do all of this async to the gui somewhow?
    }
    void LoadInstanceSettings(string FileLocation)
    {
        string Settings = "";
        using (StreamReader sr = new StreamReader(FileLocation))
        {
            Settings = sr.ReadToEnd();
        }
        InstanceSettings tmp = JsonSerializer.Deserialize<InstanceSettings>(Settings);
        //botIns.ga

        var tmpsite = Doormat.Sites.FirstOrDefault(m => m.Name == tmp.Site);
        if (tmpsite != null)
        {
            botIns.CurrentSite = Activator.CreateInstance(tmpsite.SiteType()) as DoormatCore.Sites.BaseSite;
            SiteChanged(botIns.CurrentSite, tmp.Currency, tmp.Game);
        }
        if (tmp.Game != null)
            botIns.CurrentGame = Enum.Parse<DoormatCore.Games.Games>(tmp.Game);

    }

    void SaveINstanceSettings(string FileLocation)
    {
        string Settings = JsonSerializer.Serialize<InstanceSettings>(new InstanceSettings
            {
                Site = botIns.CurrentSite?.GetType()?.Name,
                AutoLogin = false,
                Game = botIns.CurrentGame.ToString(),
                Currency = botIns.CurrentSite?.CurrentCurrency
            });
        File.WriteAllText(FileLocation, Settings);
    }

    async Task Start()
    {

        try
        {
            await (dcStrategy.Instance as iStrategy).Saving();
            botIns.SaveBetSettings(BetSettingsFile);
            botIns.Start();
        }
        catch (Exception ex)
        {
            //MessageBox.Show(ex.Message);
        }
    }
    async Task Resume()
    {
        botIns.Resume();
    }
    async Task StopOnWin()
    {
        botIns.StopOnWin = true;
    }
    async Task Stop()
    {
        botIns.StopStrategy("Stop button clicked");
    }
    void BotIns_OnSiteNotify(object sender, DoormatCore.Sites.GenericEventArgs e)
    {   
        //Figure out how to do a status bar kind of thing....
        //StatusBar.Content = e.Message;

    }
    private void BotIns_OnStopped(object sender, DoormatCore.Sites.GenericEventArgs e)
    {
        //throw new NotImplementedException();

        bbtnSimulatorIsEnabled = true;
        //StatusBar.Content = $"Stopping: {e.Message}";
        btnStartIsEnabled = true;
        btnResumeIsEnabled = true;

    }
    private void BotIns_OnStarted(object sender, EventArgs e)
    {

        bbtnSimulatorIsEnabled = false;
        //StatusBar.Content = $"Bot Started.";
        btnStartIsEnabled = false;
        btnResumeIsEnabled = false;

    }
    private void BotIns_OnSiteAction(object sender, DoormatCore.Sites.GenericEventArgs e)
    {   
        //StatusBar.Content = e.Message;
    }

    private void BotIns_OnNotification(object sender, DoormatCore.Helpers.NotificationEventArgs e)
    {

        switch (e.NotificationTrigger.Action)
        {
            case DoormatCore.Helpers.TriggerAction.Alarm:
            case DoormatCore.Helpers.TriggerAction.Chime:
            case DoormatCore.Helpers.TriggerAction.Email: break;
            case DoormatCore.Helpers.TriggerAction.Popup: //StatusBar.Content = "Something happened that triggered a notification.";
                break;

        }
        //StatusBar.Content = e.NotificationTrigger.Action = DoormatCore.Helpers.TriggerAction.;
    }

    private void BotIns_OnGameChanged(object sender, EventArgs e)
    {
        //throw new NotImplementedException();
        switch (botIns.CurrentGame)
        {
            case DoormatCore.Games.Games.Crash: break;
            case DoormatCore.Games.Games.Dice:
                ManualBetType = typeof(ManualDiceBet);
                LiveBetViewType = typeof(DiceLiveBetsControl);
                break;
            case DoormatCore.Games.Games.Plinko: break;
            case DoormatCore.Games.Games.Roulette: break;
        }
        /*OnPropertyChanged(nameof(ManualBet));
        OnPropertyChanged(nameof(LiveBets));
        ManualBet.PlaceBet += ManualBet_PlaceBet;*/
        InvokeAsync(StateHasChanged);
    }

    private void BotIns_OnSiteStatsUpdated(object sender, DoormatCore.Sites.StatsUpdatedEventArgs e)
    {

    }
    private void BotIns_OnSiteError(object sender, DoormatCore.Sites.ErrorEventArgs e)
    {
        //StatusBar.Content = "Error! " + e.Message;

    }

    async Task Simulate()
    {
        simvisible = true;
        await InvokeAsync(StateHasChanged);
    }
}
