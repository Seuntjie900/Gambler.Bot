@using KryGamesBot.MAUI.Blazor.Classes;
<h3>ProfitChart</h3>
<DxButton Text="Reset Chart" Click="btnReset_Click"/>
<DxButton Text="@freezeContent" Click="btnFreeze_Click" />
<DxChart Data="@DataPoints" CustomizeSeriesPoint="PerpareColour"  >
    <DxChartLineSeries         
        ArgumentField="@((SimpleDataPoint s) => s.Argument)"
        ValueField="@(s => s.Value)"
        Width="1"
        Color="System.Drawing.Color.Red"
         Filter='si => si.Color == "Red"'
         BreakOnEmptyPoints="true"
    >
        <DxChartSeriesPoint Visible=true
                            Size="5" />
    </DxChartLineSeries>
    <DxChartLineSeries         
        ArgumentField="@((SimpleDataPoint s) => s.Argument)"
        ValueField="@(s => s.Value)"
        Width="1"
        Color="System.Drawing.Color.Green"
        Filter='si => si.Color == "Green"'
                       BreakOnEmptyPoints="true">
        <DxChartSeriesPoint Visible=true
                            Size="5" />
    </DxChartLineSeries>
    <DxChartValueAxis Name="TotalAxis" Position="@HorizontalEdge.Left">
        <DxChartAxisTitle Text="@nameof(SimpleDataPoint.Value)"></DxChartAxisTitle>
    </DxChartValueAxis>
    <DxChartArgumentAxis>
        <DxChartAxisTitle Text="@nameof(SimpleDataPoint.Argument)"></DxChartAxisTitle>
    </DxChartArgumentAxis>
    <DxChartLegend Visible="false"></DxChartLegend>
</DxChart>

@code {
    public bool Enabled { get; set; } = true;
    int ChartItems = 0;
    decimal ChartProfit = 0;
    string freezeContent = "Freeze Chart";
    public RealTimeDataCollection DataPoints { get; set; }
    [Parameter]
    public int MaxItems { get; set; } = -1;
    decimal previousValue = 0;

    public ProfitChart()
    {

    }

    protected override Task OnInitializedAsync()
    {
        DataPoints = new RealTimeDataCollection();
        return base.OnInitializedAsync();
    }
    string previousColor = "Red";
    public void AddPoint(decimal Profit, bool win)
    {
        if (Enabled)
        {
            string color = win?"Green":"Red" ;
            string color2 = win ? "Red" : "Green";
           
            if (ChartItems >= 1)
            {
                if (previousColor != color)//set a null for the previous spot so it can skip the point
                {
                    DataPoints.Add(new SimpleDataPoint(ChartItems, (double)(ChartProfit), color));
                    
                }
            }

            ChartProfit += Profit;
            DataPoints.Add(new SimpleDataPoint(++ChartItems, (double)ChartProfit, color));
            
            if (ChartItems >= 1)
            {
                if (previousColor != color)//set a null for the previous spot so it can skip the point
                {   
                    DataPoints.Add(new SimpleDataPoint(ChartItems-1, (double)(ChartProfit - Profit), color2));
                    DataPoints.Add(new SimpleDataPoint(ChartItems, null, color2));
                }
            }

            previousColor = color;
            //profitChart.AddPoint(ChartItems++, (double)Profit);
            while (DataPoints.Count > (MaxItems > 0 ? MaxItems : UISettings.Settings.ChartBets))
            {
                DataPoints.RemoveRangeAt(0, (DataPoints.Count - (MaxItems > 0 ? MaxItems : UISettings.Settings.ChartBets)) + 1);
            }

        }
    }

    public void AddRange(List<decimal> points)
    {

        DataPoints.AddRange(points.Select(m => new SimpleDataPoint(ChartItems++, (double)(ChartProfit += m), m>0?"Green":"Red")).ToList());
        while (DataPoints.Count > (MaxItems > 0 ? MaxItems : UISettings.Settings.ChartBets))
        {
            DataPoints.RemoveRangeAt(0, (DataPoints.Count - (MaxItems > 0 ? MaxItems : UISettings.Settings.ChartBets)) + 1);
        }
    }
    public void Reset()
    {
        bool OriginalEnabled = Enabled;
        Enabled = false;
        ChartProfit = 0;
        ChartItems = 0;
        DataPoints?.Clear();
        Enabled = OriginalEnabled;
    }

    private void btnReset_Click(MouseEventArgs args)
    {
        previousValue = 0;
        Reset();
    }

    private void btnFreeze_Click(MouseEventArgs args)
    {
        Enabled = !Enabled;
        if (Enabled)
            freezeContent = "Freeze Chart";
        else
            freezeContent = "Resume Chart";
    }

    protected void PerpareColour(ChartSeriesPointCustomizationSettings pointSettings)
    {

        decimal? value = (decimal?)(double?)pointSettings.Point.Value;
        if (value <= previousValue)
            pointSettings.PointAppearance.Color =System.Drawing.Color.Red;
        else  
            pointSettings.PointAppearance.Color = System.Drawing.Color.Green;
        previousValue = value ?? 0;
    }
}

