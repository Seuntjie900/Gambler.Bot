@using DoormatCore.Helpers;
<DxLayoutBreakpoint DeviceSize="DeviceSize.XSmall" @bind-IsActive="@IsXSmallScreen" />
<div class="h-100 w-100 ps-2 pt-2 card-view-wrapper" >

   
    @if (Sites != null)
    {
        var layoutInfo = GetCurrentPageLayoutInfo();
        <div class="card-view-container">
            <div class="pe-2 pb-2">
                <DxGridLayout ColumnSpacing="0.5rem" RowSpacing="0.5rem">
                <Rows>
                    @for (int i = 0; i < layoutInfo.RowCount; i++) {
                        <DxGridLayoutRow />
                    }
                </Rows>
                <Columns>
                    @for (int i = 0; i < layoutInfo.ColCount; i++) {
                        <DxGridLayoutColumn Width="1fr" />
                    }
                </Columns>
                <Items>
                        @for (int i = layoutInfo.StartPageIndex; i <= layoutInfo.EndPageIndex; i++)
                        {
                        SitesList Site = Sites[i];
                        <DxGridLayoutItem Row="@layoutInfo.GetPageRowIndex(i)" Column="@layoutInfo.GetPageColumnIndex(i)" CssClass="border card-container">
                            <Template>
                                    <div class="text-center">
                                        <img src="@Site.Img" class="m-auto w-75 card-image" />
                                    </div>
                                   
                                <div class="card_body">
                                        <div class="iconContainer">
                                        @for (int i = 0; i < Site.Currencies?.Length && i<20; i++)
                                        {
                                            <div>
                                            <img src="/Assets/Images/Currencies/@(Site.Currencies[i]).svg" class="currency-icon" />
                                            </div>
                                        }
                                </div>
                                        <div class="card_Games">
                                            <img src="/Assets/Images/Games/dice.svg" class="currency-icon" />
                                            <img src="/Assets/Images/Games/roulette.svg" class="currency-icon grayscaled" />
                                            <img src="/Assets/Images/Games/slot.png" class="currency-icon grayscaled" />
                                    </div>
                                </div>
                                    <p class="card-link-container">
                                        <a href="javascript:;" @onclick="@(() => SiteSelected(Site))">Start Betting</a>
                                    </p>
                            </Template>
                        </DxGridLayoutItem>
                    }
                </Items>
            </DxGridLayout>
            </div>
        </div>
    }
    
</div>

@code {
    class PageLayoutInfo {
        public static int
            PageSize = 36,
            SmallScreenColCount = 1,
            MediumScreenColCount = 3;
        public PageLayoutInfo(int pageIndex, bool isXSmallScreen, int itemsCount) {
            StartPageIndex = pageIndex * PageSize;
            EndPageIndex = Math.Min(itemsCount, StartPageIndex + PageSize) - 1;
            int itemsOnPage = EndPageIndex - StartPageIndex + 1;
            ColCount = isXSmallScreen ? SmallScreenColCount : MediumScreenColCount;
            double rowCount = itemsOnPage / ColCount;
            RowCount = (int)Math.Floor(rowCount);
        }
        public int StartPageIndex { get; private set; }
        public int EndPageIndex { get; private set; }
        public int ColCount { get; private set; }
        public int RowCount { get; private set; }
        public int GetPageRowIndex(int itemIndex) 
        {
            return (itemIndex - StartPageIndex) / ColCount;
        }
        public int GetPageColumnIndex(int itemIndex) 
        {
            return itemIndex % ColCount;
        }
    }

    bool IsXSmallScreen;
    [Parameter]
    public List<SitesList> Sites {get;set;}

    [Parameter]
    public EventCallback<SitesList> OnSiteSelected {get;set;}

    int PageCount = 0;
    int ActivePageIndex = 0;


    protected override async Task OnInitializedAsync() 
    {

        PageCount = (Sites.Count() / PageLayoutInfo.PageSize) + 1;
    }

    async Task SiteSelected(SitesList details) 
    {
        await OnSiteSelected.InvokeAsync(details);
    }

    PageLayoutInfo GetCurrentPageLayoutInfo() 
    {
        return new PageLayoutInfo(ActivePageIndex, IsXSmallScreen, Sites.Count());
    }
}