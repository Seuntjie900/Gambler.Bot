@using DoormatBot.Helpers;
<h3>KryGamesBot Setup</h3>
@switch (step)
{
    case 1:
        <div id="step1">
            <p>
                Thank you for downloading KryGamesBot.

                It looks like this is the first time you're using KryGamesBot on this computer, so we need to do a little bit of setup first.

                If you would like to use completely default settings, you can cancel this Wizard now. If you would like to configure the bot, click next.

                All the settings you will configure in this wizard can also be configured from the settings menu.
            </p>
        </div>
        break;
    case 2:
        <div id="step2">
            <h3>Portable</h3>
            <p>
                Would you like to run KryGamesBot in portable mode?

                In portable mode, all settings are stored in the root folder of the application and can be taken with one a flash drive etc. Whenever you update KryGamesBot, you will need to copy all settings accross or you will need to re-configure from scratch.

                In normal mode, settings are stored in your application settings, thus cannot be easily copied over, but any update will not cause you to lose your settings.
            </p>
            <DxCheckBox CheckType="CheckType.Switch" @bind-Checked=portable>
                Portable
            </DxCheckBox>
        </div>
        break;
    case 3:
        <div id="step3">
            <h3>Look and Feel</h3>
            @* <ThemeSwitcherSideView @bind-ActiveTheme="@_activeTheme"  /> *@
        </div>
        break;
    case 4:
        <div id="step4">
            <h3>Bet Storage</h3>
            <DatabaseSetup @ref="dbSetup" Settings="settings"/>
        </div>
        break;
    case 5:
        <div id="step5">
            <h3>Keepass Password Manager</h3>
            <p>If you are using KeePass 2 to manage your passwords, you can open your passwords database using KryGamesBot to simplify your login experience.</p>
        </div>
        break;
    case 6:
        <div id="step6">
            <h3>Notification</h3>
            <p>KryGamesBot can show and send notifications when certain events happen. Here you can configure which kind of notification should happen for different events.</p>
            <Notifications Settings="settings"/>
        </div>
        break;
    case 7:
        <div id="step7">
            <h3>Error Behaviour</h3>
            <p>Unfortunately, errors are unavoidable. But luckily you can tell the bot what to do when it experiences some kind of error.</p>
            <ErrorSettings Settings="settings" />

        </div>
        break;
    case 8:
        <div id="stepdone">
            <p>
                That's it!

                You're all set up and ready to start. Finish this wizard to choose the site you want to play at and start betting!
            </p>
        </div>
        break;
}
<DxButton Text="Cancel" Click="Cancel" />
<DxButton Text="Previous" Visible=@(step>1) Click="PreviousStep"/>
<DxButton Text="Next" Visible=@(step<8) Click="NextStep" />
<DxButton Text="Finish" Visible=@(step==8) Click="Finish"/>

@code {
    ThemeItem _activeTheme 
    {
        get => MainLayout._activeTheme; 
        set => MainLayout._activeTheme = value; 
    }
    PersonalSettings settings = new PersonalSettings();
    DatabaseSetup dbSetup;
    bool portable=false;
    int step = 1;

    [Parameter]
    public EventCallback OnFinished { get; set; }

    protected override Task OnInitializedAsync()
    {
        settings = PersonalSettings.Default();
        return base.OnInitializedAsync();

    }

    async Task PreviousStep()
    {
        step--;
    }
    async Task NextStep()
    {
        string DocsPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) ,"KryGamesBot");
        bool cancel = false;
        switch(step)
        {
            case 1:
                break;
            case 2:
                if (portable)
                {
                    File.Create("portable");
                }
                else
                {
                    if (File.Exists("portable"))
                    {
                        File.Delete("portable");
                    }
                    if (!Directory.Exists(DocsPath))
                        Directory.CreateDirectory(DocsPath);
                }
                break;
            case 4:
                cancel = !dbSetup.Verify();
                if (!cancel)
                {
                    dbSetup.UpdateSettings();
                }
                //update conenction settings
                break;
            case 5:
                //KeePassSettings1.UpdateSettings(settings); 
                break; //update keepass
            case 6://update notifications
            case 7:  break;//udpate error settings
            default:  break;
        }
        if (!cancel)
            step++;
    }
    async Task Finish()
    {
        await SaveAndClose();
    }
    async Task Cancel()
    {
        //save settings and close
        settings = PersonalSettings.Default();
        await SaveAndClose();
    }
    async Task SaveAndClose()
    {
        DoormatBot.Doormat tmpInstance = new DoormatBot.Doormat();
        tmpInstance.PersonalSettings = settings;
        //save settings and close
        if (portable)
            tmpInstance.SavePersonalSettings("PersonalSettings.json");
        else
        {
            string docspath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\KryGamesBot\\";
            if (!Directory.Exists(docspath))
            {
                Directory.CreateDirectory(docspath);
            }
            tmpInstance.SavePersonalSettings(docspath + "PersonalSettings.json");

        }
        await OnFinished.InvokeAsync(false);
    }
}
