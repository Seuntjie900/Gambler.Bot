@using DoormatCore.Sites;
@using static DoormatCore.Sites.BaseSite;
<h3>Login @SelectedSite.SiteName</h3>
<div>
    <DxFormLayout CssClass="w-100">
       @foreach (var x in SelectedSite.LoginParams)
        {
            
            <DxFormLayoutItem Caption="@(x.Name + (x.Required?"*":""))">
                <DxTextBox @bind-Text="@(LoginParams[x.Name].Value)" Password=x.Masked  />
            </DxFormLayoutItem>
        }
       
    </DxFormLayout>
    <div hidden="@hideErrors">
        <p CssClass="text-danger">@errorText</p>
    </div>
    <DxButton Text="Back" Click="BackClicked" />
    <DxButton Text="View Site" Click="ViewSite" />
    <DxButton Click="LogInClicked">
        <DxWaitIndicator Visible="LoggingIng" />
        Log In
    </DxButton>
    <DxButton Text="Skip" Click="SkipClicked" />
</div>


@code {
    string LogInTest = "Log In";
    bool LoggingIng = false;
    bool hideErrors = true;
    string errorText = "";
    [Parameter]
    public BaseSite SelectedSite { get; set; }

    [Parameter]
    public EventCallback OnBackClicked { get; set; }


    [Parameter]
    public EventCallback OnSkipClicked { get; set; }


    Dictionary<string, LoginParamValue> LoginParams = new Dictionary<string, LoginParamValue>();

    protected override async Task OnInitializedAsync()
    {
        foreach (var x in SelectedSite.LoginParams)
        {
            LoginParams.Add(x.Name, new LoginParamValue { Param=x });
        }

    }

    public Login()
    {

    }

    public async Task BackClicked(MouseEventArgs args)
    {
        await OnBackClicked.InvokeAsync();
    }
    public async Task ViewSite(MouseEventArgs args)
    {
        //await OnBackClicked.InvokeAsync();
    }

    public async Task SkipClicked(MouseEventArgs args)
    {
        await OnSkipClicked.InvokeAsync();
    }

    public async Task LogInClicked(MouseEventArgs args)
    {
        LoggingIng = true;
        LogInTest = "Logging in";
        List < LoginParamValue> values = new List<LoginParamValue>();
        foreach (string x in LoginParams.Keys)
        {
            LoginParameter tmp = LoginParams[x].Param;
            if (tmp.Required && LoginParams[x].Value == null)
            {
                //set required label
                hideErrors = false;

                errorText = tmp.Name + " is required.";
                //SetButtonState(true);
                return;
            }

            values.Add(new LoginParamValue { Param = tmp, Value = LoginParams[x].Value?.ToString() ?? "" });
            if (tmp.ClearAfterEnter)
                LoginParams[x].Value = null;


        }
        SelectedSite.LogIn(values.ToArray());
    }

    public async Task LoginFinished(bool Success)
    {
        if (!Success)
        {
            hideErrors = false;
            errorText = "Login Failed";

            LoggingIng = false;
            LogInTest = "Log In";
        }
    }
}
