@using System.Diagnostics;
@using CommunityToolkit.Maui.Storage;
@using Gambler.Bot.AutoBet.Helpers;
@using Gambler.Bot.AutoBet.Strategies;
@using Gambler.Bot.Core.Sites;
<h3>Simulation</h3>
<div class="container-fluid d-flex">
<div class="col">
    Starting Balance
<DxSpinEdit @bind-Value=StartingBalance/>
number of bets
<DxSpinEdit @bind-Value=NumberOfBets />
<DxCheckBox @bind-Checked="GenerateSeeds">Generate Seeds</DxCheckBox>
<DxButton Text="Start" Click="Start" Enabled=EnableStart/>
<div>
            Server seed: <DxTextBox @bind-Text="CurrentSimulation.serverseed" ReadOnly=true />
            Server Seed Hash: <DxTextBox @bind-Text="CurrentSimulation.serverseedhash" ReadOnly=true />
            Client seed: <DxTextBox @bind-Text="CurrentSimulation.clientseed" ReadOnly=true />
Balance: <DxSpinEdit @bind-Value="CurrentSimulation.Balance" ReadOnly=true />
Progress: <DxSpinEdit @bind-Value="Progress" ReadOnly=true DisplayFormat="p3" />
            Time Running: <DxTimeEdit @bind-Time="@TimeRunning" ReadOnly=true />
            Projected Time: <DxTimeEdit @bind-Time="@ProjectedTime" ReadOnly=true />
Projected Remaining: <DxTimeEdit @bind-Time="@ProjectedRemaining" ReadOnly=true />
        <DxButton Text="Save Bets" @bind-Enabled="@EnableSave" Click="Save" />
        </div>
    </div>
    <div class="col">
<SessionStats @ref="sesseionStats1" Stats="CurrentSimulation.Stats" />
    </div>
</div>
<DxCheckBox CheckType="CheckType.Switch" @bind-Checked="@ChartEnabled" Enabled=false >Enable Chart</DxCheckBox>
<div class=@(ChartEnabled?"":"visually-hidden")>
 <ProfitChart @ref="chart"/> 
 </div>
@code {
    ProfitChart chart;
    SessionStats sesseionStats1 = new SessionStats();
    long NumberOfBets = 100000;
    decimal StartingBalance = 1m;
    Stopwatch SimTimer = new Stopwatch();
    [Parameter]
    public BaseSite CurrentSite { get; set; }
    [Parameter]
    public BaseStrategy Strategy { get; set; }
    [Parameter]
    public InternalBetSettings BetSettings { get; set; }
    bool EnableSave = false;
    private Gambler.Bot.AutoBet.Helpers.Simulation CurrentSimulation = new Gambler.Bot.AutoBet.Helpers.Simulation(0,0,null,null,null,"",false);
    bool GenerateSeeds = true;
    bool EnableStart = true;
    bool enableChart = false;
    bool ChartEnabled = false;

    public decimal Progress { get; set; }
    public TimeSpan TimeRunning { get; set; } = new TimeSpan();
    public TimeSpan ProjectedTime { get; set; } = new TimeSpan();
    public TimeSpan ProjectedRemaining { get; set; } = new TimeSpan();
    List<decimal> Bets = new List<decimal>();

    async Task Start()
    {
        Bets = new List<decimal>();
        CurrentSimulation = new Gambler.Bot.AutoBet.Helpers.Simulation(StartingBalance, NumberOfBets, CurrentSite, Strategy, BetSettings, Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), true);
        EnableSave = false;
        CurrentSimulation.OnSimulationWriting += Tmp_OnSimulationWriting;
        CurrentSimulation.OnSimulationComplete += Tmp_OnSimulationComplete;
        CurrentSimulation.OnBetSimulated += CurrentSimulation_OnBetSimulated;
        SimTimer.Start();
        if (GenerateSeeds)
        {
            CurrentSimulation.GenerateSeeds();
        }
        CurrentSimulation.Start();
        //sesseionStats1 = CurrentSimulation.Stats;
        EnableStart = false;
        await InvokeAsync(StateHasChanged);
    }

    private void CurrentSimulation_OnBetSimulated(object sender, BetFinisedEventArgs e)
    {

        if (ChartEnabled)
        {
            Bets.Add(e.NewBet.Profit);

            if (Bets.Count > 0 && Bets.Count % 100 == 0)
            {
                var bets = Bets;
                Bets = new List<decimal>();
                if (chart.Enabled)
                {
                    chart.AddRange(bets);
                }
            }
        }
    }

    private void Tmp_OnSimulationComplete(object sender, EventArgs e)
    {

        SimTimer.Stop();
        Gambler.Bot.AutoBet.Helpers.Simulation tmp = sender as Gambler.Bot.AutoBet.Helpers.Simulation;
        sesseionStats1.RefreshStats();
        long ElapsedMilliseconds = SimTimer.ElapsedMilliseconds;
        Progress = (decimal)tmp.TotalBetsPlaced / (decimal)tmp.Bets;
        decimal totaltime = ElapsedMilliseconds / Progress;
        TimeRunning = TimeSpan.FromMilliseconds(ElapsedMilliseconds);
        ProjectedTime = TimeSpan.FromMilliseconds((double)totaltime);
        ProjectedRemaining = TimeSpan.FromMilliseconds((double)totaltime - ElapsedMilliseconds);

        SimTimer.Reset();
        EnableSave = true;
        EnableStart = true;
        InvokeAsync(StateHasChanged);
    }

    private void Tmp_OnSimulationWriting(object sender, EventArgs e)
    {

        Gambler.Bot.AutoBet.Helpers.Simulation tmp = sender as Gambler.Bot.AutoBet.Helpers.Simulation;
        //Console.WriteLine("Simulation Progress: " + tmp.TotalBetsPlaced + " bets of " + tmp.Bets);

        if (tmp.TotalBetsPlaced > 0)
        {
            long ElapsedMilliseconds = SimTimer.ElapsedMilliseconds;
            Progress = (decimal)tmp.TotalBetsPlaced / (decimal)tmp.Bets;

            decimal totaltime = ElapsedMilliseconds / Progress;
            TimeRunning = TimeSpan.FromMilliseconds(ElapsedMilliseconds);
            ProjectedTime = TimeSpan.FromMilliseconds((double)totaltime);
            ProjectedRemaining = TimeSpan.FromMilliseconds((double)totaltime - ElapsedMilliseconds);
            sesseionStats1.RefreshStats();
        }
        InvokeAsync(StateHasChanged);
    }

    async Task Save()
    {
        CancellationTokenSource src = new CancellationTokenSource();
        var fileSaverResult = await FileSaver.Default.SaveAsync( DateTime.Now.ToString("yyyyMMddHHmmss")+ ".csv", CurrentSimulation.GetStream(), src.Token);
        if (fileSaverResult.IsSuccessful)
        {
            CurrentSimulation.DeleteLog();
        }
    }
}
